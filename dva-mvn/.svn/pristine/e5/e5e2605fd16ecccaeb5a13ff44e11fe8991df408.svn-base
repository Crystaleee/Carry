package edu.bupt.dmg.algorithm.impl;

import java.util.Collections;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.TreeMap;

import Jama.Matrix;
import edu.bupt.dmg.algorithm.DimReductionAlgorithm;
import edu.bupt.dmg.formbean.Table;
/**
 * PCA算法
 * 
 * Project Name: VisAna<br> 
 * File Name: PCA.java<br> 
 * Package Name: edu.bupt.dmg.algorithm.impl<br>       
 * Creator: @author Ruitong Chai & Bohao Wang<br>    
 * Create Time：2017年4月22日<br>
 * Version: @version 0.0.1
 */
public class PCA extends DimReductionAlgorithmHelper implements DimReductionAlgorithm {

	@Override
	public Table excecute(Table table, int dim) {
		double[][] data = parseData(table);
		data = reverse(data);
		double[][] Z = zscore(data);
		double[][] C = cov(Z);
		double[][] W = eigenVector(C);
		double[][] D = eigenValue(C);
		double[][] P = projection(D, W, data, dim);

		return rebuildTable(reverse(P));
	}

	public double[][] reverse(double[][] data) {
		double[][] reversedData = new double[data[0].length][data.length];
		for (int i = 0; i < reversedData.length; i++) {
			for (int j = 0; j < reversedData[i].length; j++) {
				reversedData[i][j] = data[j][i];
			}
		}
		return reversedData;
	}

	/**
	 * normalize the data matrix distribution to (0,1)
	 * 
	 * @param datamatrix
	 *            the very original data matrix, n*d.
	 * @return the normalized data matrix
	 */
	public double[][] zscore(double[][] datamatrix) {

		int i = 0, j = 0;
		int row = datamatrix.length;
		int col = datamatrix[0].length;
		double[] avg = new double[col];
		double[] var = new double[col];
		double[][] Z = new double[row][col];
		double sum = 0;
		for (j = 0; j < col; j++) {
			sum = 0;
			for (i = 0; i < row; i++) {
				sum += datamatrix[i][j];
			}
			avg[j] = sum / row;
		}
		for (j = 0; j < col; j++) {
			sum = 0;
			for (i = 0; i < row; i++) {
				sum += (datamatrix[i][j] - avg[j]) * (datamatrix[i][j] - avg[j]);
			}
			var[j] = sum / (row - 1);
		}

		for (i = 0; i < row; i++) {
			for (j = 0; j < col; j++) {
				Z[i][j] = (datamatrix[i][j] - avg[j]) / (Math.sqrt(var[j]));
			}
		}
		return Z;
	}

	/**
	 * compute covariance
	 * 
	 * @param Z
	 * @return the covariance matrix
	 */
	public double[][] cov(double[][] Z) {
		int row = Z.length;
		int col = Z[0].length;
		double[][] C = new double[col][col];
		int i = 0, j = 0, k = 0;
		double sum = 0;
		for (i = 0; i < col; i++) {
			for (j = 0; j < col; j++) {
				sum = 0;
				for (k = 0; k < row; k++) {
					sum += Z[k][i] * Z[k][j];
				}
				C[i][j] = sum / (row - 1);
			}
		}
		return C;
	}

	/**
	 * compute eigenvalue.
	 * 
	 * @param C
	 *            covariance matrix
	 * @return eigenvalue
	 */
	public double[][] eigenValue(double[][] C) {
		Matrix _C = new Matrix(C);
		double[][] value = _C.eig().getD().getArray();
		return value;
	}

	/**
	 * compute eigenvector
	 * 
	 * @param C
	 *            covariance matrix
	 * @return eigenvector
	 */
	public double[][] eigenVector(double[][] C) {
		Matrix _C = new Matrix(C);
		double[][] vector = _C.eig().getV().getArray();
		return vector;
	}

	/**
	 * compute the projection of the datamatrix to the target matrix according
	 * to dimension n
	 * 
	 * @param value
	 *            eigenvalue matrix
	 * @param vector
	 *            eigenvector matrix
	 * @param datamatrix
	 *            the original data matrix
	 * @param n
	 *            the target dimension n
	 * @return the target projection matrix
	 */
	public double[][] projection(double[][] value, double[][] vector, double[][] datamatrix, int n) {
		int order = value.length;
		double[] valuearr = new double[order];
		TreeMap<Double, double[]> eigen = new TreeMap<Double, double[]>(Collections.reverseOrder());
		double[][] _vector = new double[order][n];
		double[][] _vector_T = new double[n][order];
		Matrix V = new Matrix(vector);
		double[][] vector_T = V.transpose().getArray();
		int i = 0;
		for (i = 0; i < vector_T.length; i++) {
			for (int j = 0; j < vector_T[0].length; j++) {
				System.out.print(vector_T[i][j] + " ");
			}
			System.out.println("");
		}
		System.out.println("");
		for (i = 0; i < order; i++)
			valuearr[i] = value[i][i];

		for (i = 0; i < order; i++)
			eigen.put(valuearr[i], vector_T[i]);

		Iterator<Entry<Double, double[]>> it = eigen.entrySet().iterator();
		i = 0;
		while (it.hasNext() && i < n) {
			_vector_T[i] = it.next().getValue();
			i++;
		}
		_vector = new Matrix(_vector_T).transpose().getArray();
		for (i = 0; i < _vector.length; i++) {
			for (int j = 0; j < _vector[0].length; j++) {
				System.out.print(_vector[i][j] + " ");
			}
			System.out.println("");
		}
		double[][] _datamatrix = multiplication(datamatrix, _vector);
		return _datamatrix;
	}

	/**
	 * compute the projection of the datamatrix to the target matrix according
	 * to the given threshold
	 * 
	 * @param value
	 *            eigenvalue matrix
	 * @param vector
	 *            eigenvector matrix
	 * @param datamatrix
	 *            the original data matrix
	 * @param threshold
	 *            the given threshold
	 * @return the target projection matrix
	 */
	public double[][] projection(double[][] value, double[][] vector, double[][] datamatrix, double threshold) {
		int order = value.length;
		double[] valuearr = new double[order];
		TreeMap<Double, double[]> eigen = new TreeMap<Double, double[]>(Collections.reverseOrder());
		double totalvalue = 0, sum = 0;
		int n = 0;// dim
		int i = 0;
		for (i = 0; i < order; i++)
			valuearr[i] = value[i][i];
		for (i = 0; i < order; i++)
			eigen.put(valuearr[i], vector[i]);// !!make sure the col is the same
												// with the row
		for (i = 0; i < order; i++)
			totalvalue += valuearr[i];
		for (double key : eigen.keySet()) {
			sum += key;
			if (sum / totalvalue < threshold)
				n++;
		}
		return projection(value, vector, datamatrix, n);
	}

	/**
	 * matrix multiplication
	 * 
	 * @param datamatrix
	 *            the original data matrix
	 * @param _vector
	 *            the selected eigenvector
	 * @return the result matrix
	 */
	public double[][] multiplication(double[][] datamatrix, double[][] _vector) {
		Matrix D = new Matrix(datamatrix);
		Matrix V = new Matrix(_vector);
		double[][] _datamatrix = D.times(V).getArray();
		return _datamatrix;
	}
}
