package edu.bupt.dmg.algorithm.impl.slpa;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import edu.bupt.dmg.formbean.Table;

/**
 * Data structure the hold the undirected graph on which clustering algorithm is run to
 * find the overlapping communities using SLPA algorithm.
 * @author pejakalabhargava
 *
 */
public class Graph {
	
	//Number of edges in the graph
	int edges;
	
	//Number of vertices of the graph
	int vertices;
	
	//This holds the id of the node and the reference to corresponding Node refernce
	Map<Integer, Node> graphADT;
	
	// This is used to hold the final communities that are calculated.Key of the
	// map is the labelId of the community and value is the set of integers
	// representing the node Id's present in that community.
	Map<Integer,Set<Integer>> overlappingCommunities;

	// Constructor to create the graph which takes the filename as input.
	// Firs line consists of nubmer of vertices and number of edges sepearetd by
	// space.Subsequent lines consists of edges in the network represented as
	// "from to".
	public Graph(ArrayList<Table> tableList,int nodeCnt,int edgeCnt) {
		graphADT = new LinkedHashMap<Integer, Node>();
		overlappingCommunities =  new HashMap<Integer, Set<Integer>>();
		edges=edgeCnt;
		vertices=nodeCnt;
		readGraph(tableList);
	}

	/**
	 * 
	 * @param filepath
	 */
	private void readGraph(ArrayList<Table> tableList) {
		for(Map<String, String> map:tableList.get(0).getContent()){
			int source = (int) Float.parseFloat(map.get("source"));
			int target = (int) Float.parseFloat(map.get("target"));
			addEdge(source, target);
		}
	}

	/**
	 * This method adds an edge into the graph data structure.make sure to add two entries since the graph is
	 * undirected.
	 * @param source
	 * @param dest
	 */
	private void addEdge(Integer source, Integer dest) {
		//Check if source node exists else create a new one.
		Node sourceNode = graphADT.get(source);;
		if (sourceNode == null) {	
			sourceNode = new Node(source);
			graphADT.put(source, sourceNode);
		}
		//Check if destintation node exists else create a new one.
		Node destNode = graphADT.get(dest);
		if (destNode == null) {
			destNode = new Node(dest);
			graphADT.put(dest, destNode);
		}
		//Add an entry into the adjacenecy list.
		sourceNode.addNeighbour(destNode);
		destNode.addNeighbour(sourceNode);
	}

	/**
	 * Gets the node based on nodeId
	 * @param nodeId
	 * @return integer
	 */
	public Node getNode(int nodeId) {
		return graphADT.get(nodeId);
	}

	/**
	 * Gets number of edges in the undirected graph
	 * @return integer
	 */
	public int getNumberOfEdges() {
		return edges;
	}

	/**
	 * Gets number of vertices in the undirected graph
	 * @return integer
	 */
	public int getNumberVertices() {
		return vertices;
	}

	/**
	 * Returns the map holding the final communities.
	 * @return community map
	 */
	public Map<Integer, Set<Integer>> getOverlappingCommunities() {
		return overlappingCommunities;
	}
}
