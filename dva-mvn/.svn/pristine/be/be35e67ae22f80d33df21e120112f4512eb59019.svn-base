package edu.bupt.dmg.algorithm.impl.slpa;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;

import edu.bupt.dmg.algorithm.CommunityDetectAlgorithm;
import edu.bupt.dmg.algorithm.impl.CommunityDetectAlgorithmHelper;
import edu.bupt.dmg.formbean.Table;

/**
 * This project is implementation of Speaker-listener Label Propagation
 * Algorithm which is used to detecting overlapping community. Algorithm:SLPA(T,
 * r ) T : the user defined maximum iteration r: post-processing threshold 1)
 * First, the memory of each node is initialized with a unique label. 2) Then,
 * the following steps are repeated until the maximum iteration T is reached: a.
 * One node is selected as a listener. b. Each neighbor of the selected node
 * randomly selects a label with probability proportional to the occurrence
 * frequency of this label in its memory and sends the selected label to the
 * listener. c. The listener adds the most popular label received to its memory.
 * 3) Finally, the post-processing based on the labels in the memories and the
 * threshold r is applied to output the communities.
 * 
 * Run as: mvn clean install mvn exec:java -Dexec.args=
 * "amazon.graph.original amazon.graph.comm 20 0.5" from command line. or mvn
 * clean install cd target java -jar slpa-0.0.1.jar amazon.graph.original
 * amazon.graph.comm 20 0.5
 * 
 * @author pejakalabhargava Ruitong Chai & Bohao Wang
 *
 */
public class SLPA extends CommunityDetectAlgorithmHelper implements CommunityDetectAlgorithm {

	// This holds the input graph
	Graph graph;

	// r: post-processing threshold
	double threshHold;

	// T : the user defined maximum iteration
	int iterations;

	/*
	 * Constructor to create the graph from the given input.
	 */
	public SLPA(int inputIterations, double inputThreshHold) {
		threshHold = inputThreshHold;
		iterations = inputIterations;
	}

	/**
	 * The following steps are repeated until the maximum iteration T is
	 * reached: a. One node is selected as a listener. b. Each neighbor of the
	 * selected node randomly selects a label with probability proportional to
	 * the occurrence frequency of this label in its memory and sends the
	 * selected label to the listener. c. The listener adds the most popular
	 * label received to its memory.
	 */
	private void propogateMemorylabel() {

		// Create an array to hold all the nodeIds from 0 to (noOfVertices-1)
		int[] nodeId = new int[graph.getNumberVertices()];
		// Initilaize the array with values from 0 to (noOfVertices-1)
		for (int i = 0; i < nodeId.length; i++) {
			nodeId[i] = i;
		}

		// Loop iteration T number of times
		for (int i = 1; i <= iterations; i++) {
			System.out.println("starting Iteration " + i + " of SLPA.");
			// Rearrange the integer array to hold numbers in random order from
			// 0 to (noOfVertices-1) in it.
			ShuffleArray(nodeId);
			for (int j = 0; j < nodeId.length; j++) {
				// One node is selected as a listener
				Node listener = graph.getNode(j);
				// Call listen so that all neighbours can speak to this node by
				// sending selected label.
				listener.listen();
			}
		}
	}

	/**
	 * Fisherâ€“Yates
	 * shuffle(http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
	 * function to shuffle the elements of a given integer array.
	 */
	private void ShuffleArray(int[] array) {
		int index;
		Random random = new Random();
		for (int i = array.length - 1; i > 0; i--) {
			index = random.nextInt(i + 1);
			if (index != i) {
				array[index] ^= array[i];
				array[i] ^= array[index];
				array[index] ^= array[i];
			}
		}
	}

	/**
	 * This function implements the post-processing based on the labels in the
	 * memories and the threshold r is applied to output the communities
	 */
	private void postProcessing() {

		// Get the map to hold the community label and set of nodes in that
		// community
		Map<Integer, Set<Integer>> community = graph.getOverlappingCommunities();
		// find the cluster each node of the graph belongs to.
		for (int i = 0; i < graph.getNumberVertices(); i++) {
			Node node = graph.getNode(i);
			// Get the memory map of the node with label as key
			// and count as value
			Map<Integer, Integer> memoryMap = node.getMemoryMap();
			// get the number of communities this node belongs to
			int noOfCommunities = node.getNoOfCommunities();
			// Iterate through the memory map
			for (Map.Entry<Integer, Integer> entry : memoryMap.entrySet()) {
				Integer labelId = entry.getKey();
				Integer count = entry.getValue();
				// Calculate the ratio of the label count against total number
				// of communities
				double probalityDensity = (double) count / noOfCommunities;
				// If ration is greater than threhsold input, then add this node
				// to the community
				// identified by the label.
				if (probalityDensity >= threshHold) {
					// Check if the label exits in the community map and if it
					// doesnt
					// exist create one for this label and add the node to the
					// set.
					if (community.get(labelId) == null) {
						Set<Integer> communitySet = new HashSet<Integer>();
						community.put(labelId, communitySet);
						communitySet.add(node.getNodeId());
					} else {
						Set<Integer> communitySet = community.get(labelId);
						communitySet.add(node.getNodeId());
					}
				}
			}
		}
	}

	@Override
	public ArrayList<Table> excecute(ArrayList<Table> tableList) {
		graph = new Graph(tableList, getNodeCnt(tableList), getEdgeCnt(tableList));
		propogateMemorylabel();
		postProcessing();
		Map<Integer, Set<Integer>> communities = graph.getOverlappingCommunities();

		Table nodeTable = null;
		if (tableList.size() < 2) {
			nodeTable = new Table();
			nodeTable.getHeadType().put("name", "measure");
			for (int i = 0; i < graph.getNumberVertices(); i++) {
				Map<String, String> node = new LinkedHashMap<>();
				node.put("name", String.valueOf(i));
				nodeTable.getContent().add(node);
			}
			tableList.add(nodeTable);
		} else {
			nodeTable = tableList.get(1);
		}
		
		nodeTable.getHeadType().put("group", "measure");
		int i =0;
		//Iterate through the each community to output the community to the output file line by line.
		for (Entry<Integer, Set<Integer>> entry : communities.entrySet()) {
			i++;
			Set<Integer> nodeIdSet = entry.getValue();
			for (Integer index : nodeIdSet) {
				nodeTable.getContent().get(index).put("group", String.valueOf(i));
			}
		}
		System.out.println("total community:"+i);
		return tableList;
	}
}
