<!DOCTYPE html>
<html>

	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->

		<title>密度图</title>

		<link rel="stylesheet" href="../theme/bootstrap/css/bootstrap.min.css" />
		<link rel="stylesheet" href="../theme/datetimepicker/css/bootstrap-datetimepicker.min.css" />
		<link rel="stylesheet" href="../theme/slider/css/bootstrap-slider.min.css" />
		<link rel="stylesheet" href="../js/geo/openlayer/ol.css" />
		<link rel="stylesheet" href="../js/geo/leaflet/leaflet.css" />
		<link rel="stylesheet" href="../app/densityMap/densityMap.css"  />		
	</head>

	<body style="overflow: hidden;">
		<div style="position: absolute; z-index: 999; right: 20px; top: 10px;">
			<select id="type" class="form-control" onchange="checkType(this.value)">
				<option value="电量">电量密度(度/平方公里)</option>
				<option value="负荷">负荷密度(千瓦/平方公里)</option>
			</select>	
			<input id="datepicker" class="form-control" type="date" value="2016-04-30" onchange="reRender()"/>
		</div>
		<div id="time-panel">
			<div class="time-panel-progress-container">
				<div class="time-panel-progress-bar">
					<input id="timeline" type="text" onchange="renderTest()"/>
				</div>
				<div class="time-panel-progress-tick">
					<svg id="tick"></svg>
				</div>
			</div>
			<div id="time-btn" class="time-panel-btn play" onclick="play(this)"></div>
		</div>
		
		<div id="map" style="width: 100%; height: 610px;"></div>

		<script type="text/javascript" src="../js/jquery/jquery-1.11.3.min.js"></script>
		<script type="text/javascript" src="../theme/bootstrap/js/bootstrap.min.js"></script>
		<script type="text/javascript" src="../theme/slider/js/bootstrap-slider.min.js"></script>
		<script type="text/javascript" src="../js/geo/openlayer/ol.js"></script>
		<script type="text/javascript" src="../app/densityMap/functionRegion.js"></script>
		<script type="text/javascript" src="../js/geo/leaflet/leaflet.js"></script>
		<script type="text/javascript" src="../js/d3/d3.min.js"></script>
		<script>
			var timeline = ["00:00", "00:15", "00:30", "00:45", "01:00", "01:15", "01:30", "01:45", "02:00", "02:15", "02:30", "02:45", "03:00", "03:15", "03:30", "03:45", "04:00", "04:15", "04:30", "04:45", "05:00", "05:15", "05:30", "05:45", "06:00", "06:15", "06:30", "06:45", "07:00", "07:15", "07:30", "07:45", "08:00", "08:15", "08:30", "08:45", "09:00", "09:15", "09:30", "09:45", "10:00", "10:15", "10:30", "10:45", "11:00", "11:15", "11:30", "11:45", "12:00", "12:15", "12:30", "12:45", "13:00", "13:15", "13:30", "13:45", "14:00", "14:15", "14:30", "14:45", "15:00", "15:15", "15:30", "15:45", "16:00", "16:15", "16:30", "16:45", "17:00", "17:15", "17:30", "17:45", "18:00", "18:15", "18:30", "18:45", "19:00", "19:15", "19:30", "19:45", "20:00", "20:15", "20:30", "20:45", "21:00", "21:15", "21:30", "21:45", "22:00", "22:15", "22:30", "22:45", "23:00", "23:15", "23:30", "23:45"];
			var scaleRate = 0.0012;
			var map = L.map('map', {
				center: [-20, 30], // [上下, 左右]
				zoom: 3,
				minZoom: 3
			});
			L.control.attribution().removeAttribution();

			var sortNum = function(a, b) {
				return a - b;
			}

			// 颜色生成器
			var white = d3.rgb('#FFFFFF');
			var red = d3.rgb(255, 0, 0);
			var compute = d3.interpolate(white, red);
			var colors = ['#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc412a', '#e31a14', '#BD0026', '#800026'];

			// 线性比例尺
			var linear = d3.scale.linear().domain([0, 3000]).range([10, 100]);

			var densitys = {};
			var QGrades = [5000, 15000, 25000, 35000, 50000, 200000, 500000];
			var PGrades = [500, 1000, 2000, 3000, 5000, 10000, 30000];
			var grades = QGrades;
			
			var initTimePanel = function() {
				$('#timeline').slider({
						formatter: function(value) {
							return timeline[value];
						},
						tooltip: 'always',
						tooltip_position: 'bottom',
						min: 0,
						max: 95,
						step: 1,
						value: 0
				});
				appendRule(0, 0);
			}
			
			initTimePanel();

			function appendRule(pos_x, pos_y) {
				var linear = d3.scale.linear()
					.domain([0, 95])
					.range([0, 400]);
				var yAxis = d3.svg.axis()
					.scale(linear)
					.orient("bottom")
					.ticks(3)
					.tickValues([0, 15, 31, 47, 63, 79, 95])
					.tickFormat(function(d, i) {
						var ticks = ["00:00", "03:45", "07:45", "11:45", "15:45", "19:45", "23:45"]
						return ticks[i];
					});
				d3.select("#tick").append("g")
					.attr("class", "axis")
					.attr("transform", "translate(" + (pos_x+25) + "," + pos_y + ")")
					.call(yAxis);
			}
			
			var intervalId;
			function play() {
				console.log($('#time-btn')[0].className);
				if ($('#time-btn')[0].className == "time-panel-btn play") {
					$('#time-btn').removeClass("play");
					var time = parseInt($('#timeline').val());
					intervalId = setInterval(function() {
						if((time++) > 95) {
							time = 0;
						}
						$("#timeline").slider('setValue', time);
						renderTest();
					}, 1000);
				} else {
					$('#time-btn').addClass("play");
					window.clearInterval(intervalId);
				}
			}

			function checkType(val) {
				if (val === "电量") {
					$('#datepicker').attr('type', 'date');
					$('#datepicker').attr('value', '2016-04-30');
					$('#time-panel').css("display", 'none');
					window.clearInterval(intervalId);
					$('#time-btn')[0].className = "time-panel-btn play";
				} else if (val === "负荷") {
					$('#datepicker').attr('type', 'date');
					$('#datepicker').attr('value', '2016-04-30');
					$('#time-panel').css("display", "block");
				}
			}

			// 信息提示框
			var info = L.control();
			info.onAdd = function(map) {
				this._div = L.DomUtil.create('div', 'infoTips');
				this.update();
				return this._div;
			};
			info.update = function(feature, e) {
				if (feature) {
					var tips = '';
					if (densitys[feature.id]) {
						tips = '<b>' + feature.properties.name + '</b><br />' + densitys[feature.id].toFixed(1);
					} else {
						tips = '<b>' + feature.properties.name + '</b><br />';
					}
					d3.select('.infoTips').html(tips)
						.style("left", (e.originalEvent.clientX + 20) + "px")
						.style("top", (e.originalEvent.clientY) + "px")
						.style("opacity", "1")
						.style("z-index", 999);
				} else {
					d3.select('.infoTips').style("opacity", 0);
				}
			}
			info.addTo(map);

			// 根据用电密度设置颜色
			var getColor = function(density) {
				if (density === undefined) {
					return colors[0];
				}
				for (var i = 0; i < grades.length; i++) {
					if (density <= grades[i]) {
						return colors[i];
					}
				}
				return colors[i];
			}

			var style = function(feature) {
				return {
					weight: 0.5,
					opacity: 1,
					color: 'white',
					dashArray: '3',
					fillOpacity: 0.7,
					fillColor: getColor(densitys[feature.id])
				};
			};

			var highlightFeature = function(e) {
				var layer = e.target;

				layer.setStyle({
					weight: 3,
					color: '#666',
					dashArray: '',
					fillOpacity: 0.7
				});

				if (!L.Browser.ie && !L.Browser.opera) {
					layer.bringToFront();
				}

				info.update(layer.feature, e)
			};

			var resetHighlight = function(e) {
				geojson.resetStyle(e.target);
				info.update();
			};

			var zoomToFeature = function(e) {
				map.fitBounds(e.target.getBounds());
			};

			var onEachFeature = function(feature, layer) {
				layer.on({
					mouseover: highlightFeature,
					mouseout: resetHighlight,
					mousemove: function(e) {
						info.update(e.target.feature, e);
					},
					// click: zoomToFeature
				});
			};

			var geojson = L.geoJson(functionRegion, {
				style: style,
				onEachFeature: onEachFeature,
				coordsToLatLng: function(coor) {
					return [coor[1] * scaleRate, coor[0] * scaleRate];
				}
			}).addTo(map);

			// lengend
			var lengend = L.control({
				position: 'bottomleft'
			});
			lengend.onAdd = function(map) {
				this._div = L.DomUtil.create('div', 'info legend');
				this.update();
				return this._div;
			}
			lengend.update = function() {
				var labels = [],
					from, to;
				for (var i = 0; i < grades.length; i++) {
					from = grades[i];
					to = grades[i + 1];
					if (i == 0) {
						labels.push('<i style="background:' + getColor(from - 1) + '"></i>' + '&lt' + parseInt(from));
					}
					labels.push('<i style="background:' + getColor(from + 1) + '"></i>' + parseInt(from) + (to ? '&ndash;' + parseInt(to) : '+'));
				}
				this._div.innerHTML = labels.join('<br>');
			};
			lengend.addTo(map);

			// reRender();
			renderTest();

			function renderTest() {
				var data = {};
				for (var i = 0; i < 145; i++) {
					data[i] = Math.random() * 600000;
				}
				renderDensity(data);
			}

			function reRender() {
				var val = $('#datepicker').val();

				if ($('#type').val() === "电量") {
					grades = QGrades;
				} else if ($('#type').val() === "负荷") {
					val = [val, timeline[$('#timeline').val()] + ':00'].join(' ');
					grades = PGrades;
				}

				var url_ = "http://192.168.0.63:8080/dva-mvn/elecData/density/" + val + ".do";

				$.ajax({
					type: "get",
					url: url_,
					dataType: "text",
					success: function(data) {
						renderDensity(data);
					},
					error: function(error) {
						console.log("error");
					}
				});
			}
			
			function renderDensity(data) {
				if (!($.isEmptyObject(data))) {
					for (var id in data) {
						if (data[id]) {
							densitys[id] = parseFloat(data[id]);
						} else {
							densitys[id] = 0;
						}
					}
				} else {
					alert('无数据记录');
					for (var id in densitys) {
						densitys[id] = 0;
					}
				}

				geojson.setStyle(style);
				lengend.update();
			}
		</script>
	</body>
</html>